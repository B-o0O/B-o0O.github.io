{"posts":[{"title":"资源汇总","text":"持续更新… 缺课missing-semester GitBook详解Git 教程tutorial JS现代教程 书籍book计算机基础 编码：隐匿在计算机软硬件背后的语言 网站site 技术书籍网站 MIT OpenCourseWare 博客手册","link":"/resource/ocean/"},{"title":"git底层原理","text":"Git底层原理git 日志git log /git log -g/git reflog 区别 理解区别Question git reflog 和git log -g查看的是整个仓库的历史,git log 查看的是当亲分支的历史，这样理解对吗 Answer 您的理解是正确的。以下是对这几条命令的具体说明： **git log**：这个命令用于查看当前分支的提交历史。它只会显示您当前所处分支的提交记录，不会涉及其他分支的历史。 **git reflog**：这个命令用于查看本地仓库的引用日志，它会显示最近的操作记录，包括提交、暂存、切换分支等。reflog 记录了所有操作的引用，实际上可以帮助您找到丢失的提交或撤销某些操作。 **git log -g**：这个命令是 git log 的一种扩展，可以查看引用的提交记录，包含所有的 refs（如分支和标签的移动历史）。它展示的数据不仅限于当前分支，而是涵盖了关于引用的更多信息，类似于 reflog 的内容。 总结来说： git log 关注于当前分支的历史。 git reflog 关注于本地操作的历史。 git log -g 则提供了对引用变动历史的一个全面视图。 希望这能帮助您更好地理解这几个命令的区别！2. 具体例子 读log 括号中有head的即当前活动所在commit对象 括号中的分支即引用了这个commit的所有分支，当分支更新提交时就会随之变化，其实就是指明了对应的分支正在活动的commit对象处，切换分支时就是切换到这个commit 括号中红色为远程分支，绿色是本地分支、 HEAD@{number}是commit 的别名，可以使用reset head~number的形式回退 “:”后的内容说明了做了什么操作来到这个commit git log 查看当前分支日志 git reflog 查看 git log -g 查看包括reflog 的日志","link":"/missing-semester/git%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"},{"title":"post","text":"Timeline History Site","link":"/blog/tech-history/%E9%80%9A%E4%BF%A1%E5%8F%B2/"},{"title":"hexo实践","text":"创建带路径文章1hexo new post title -p folder/filename p即path title是文章标题即文章模板中的title 修改生成文章的模板编辑/scaffolds下的文件模板 插件 hexo-asset-image图片路径插件 安装1npm install hexo-asset-image --save 配置_config.yml文件``,在生成文章时自动在同级目录创建同名文件夹1post_asset_folder: true 使用使用markdown语法引用图片即可，插件会自动生成可访问的绝对路径。如：123456title/ 1.img subfolder/ 2.imgtitle.md在title.md中使用![text](1.img)、![text](./subfolder/2.img)","link":"/tool/hexo%E6%95%99%E7%A8%8B/hexo%E5%AE%9E%E8%B7%B5/"}],"tags":[],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"}],"pages":[]}