<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ComputerHistory</title>
    <url>//ComputerHistory/</url>
    <content><![CDATA[<h1 id="计算机发展史"><a href="#计算机发展史" class="headerlink" title="计算机发展史"></a>计算机发展史</h1><p>一台计算机由软件和硬件构成，软件实际上就是具有逻辑性的信息集合，具体来说就是数据集和指令集的有序组织，信息的承载则是通过编码系统来实现的，现在的计算机几乎都使用二进制编码。硬件则是编码系统的物理承载介质，现在的计算机硬件结构都是基于冯诺依曼结构扩展而来的，早期计算机的发展是和硬件绑定的，大致可以分为继电器时期、真空管时期、晶体管时期。</p>
<div>
    <img src="/ComputerHistory/image.png" width="50%" height="50%" style="border: 1px solid black;float: left;">
</div>


<div style="clear: both;"></div>

<h2 id="继电器时期"><a href="#继电器时期" class="headerlink" title="继电器时期"></a>继电器时期</h2><p>继电器时期的计算机称为机电计算机&#x2F;继电器计算机（Relay Computer&#x2F;Relay Systems），更早之前纯机械的则称为机械计算机，不在此讨论。</p>
<details class="note info"><summary><p>Relay Systems</p>
</summary>
<p><a href="https://en.wikichip.org/wiki/relay_computer">信息来源</a></p>
<table>
<thead>
<tr>
<th>System</th>
<th>Developer</th>
<th>Company&#x2F;Institution</th>
<th>Relay Count</th>
<th>Year Complete</th>
<th>Notes</th>
</tr>
</thead>
<tbody><tr>
<td>Model K</td>
<td>George Stibitz</td>
<td>Bell Labs</td>
<td></td>
<td>1937</td>
<td></td>
</tr>
<tr>
<td>Model I</td>
<td>George Stibitz</td>
<td>Bell Labs</td>
<td>400</td>
<td>1939</td>
<td></td>
</tr>
<tr>
<td>Z2</td>
<td>Konrad Zuse</td>
<td></td>
<td>600</td>
<td>1939</td>
<td></td>
</tr>
<tr>
<td>Z3</td>
<td>Konrad Zuse</td>
<td></td>
<td>2,000</td>
<td>1941</td>
<td></td>
</tr>
<tr>
<td>Model II</td>
<td></td>
<td>Bell Labs</td>
<td>440</td>
<td>1943</td>
<td></td>
</tr>
<tr>
<td>Z4</td>
<td>Konrad Zuse</td>
<td>Zuse Apparatebau</td>
<td>2,500</td>
<td>1944</td>
<td></td>
</tr>
<tr>
<td>Model III</td>
<td></td>
<td>Bell Labs</td>
<td>1,400</td>
<td>1944</td>
<td></td>
</tr>
<tr>
<td>Harvard Mark I</td>
<td>Howard Aiken</td>
<td>IBM</td>
<td>3,500</td>
<td>1944</td>
<td></td>
</tr>
<tr>
<td>Model IV</td>
<td></td>
<td>Bell Labs</td>
<td>1,400</td>
<td>1945</td>
<td></td>
</tr>
<tr>
<td>Model V</td>
<td></td>
<td>Bell Labs</td>
<td>9,000</td>
<td>1946</td>
<td></td>
</tr>
<tr>
<td>Harvard Mark II</td>
<td>Howard Aiken</td>
<td></td>
<td></td>
<td>1947</td>
<td></td>
</tr>
<tr>
<td>SSEC</td>
<td></td>
<td>IBM</td>
<td>21,400</td>
<td>1948</td>
<td>vacuum tubes &amp; relays hybrid</td>
</tr>
<tr>
<td>Baby Atlas</td>
<td></td>
<td>CSAW</td>
<td></td>
<td>1949</td>
<td>Used for the debugging of the Atlas computer</td>
</tr>
<tr>
<td>Model VI</td>
<td></td>
<td>Bell Labs</td>
<td></td>
<td>1950</td>
<td></td>
</tr>
<tr>
<td>BARK</td>
<td></td>
<td>Matematikmaskinnämnden</td>
<td>8,000</td>
<td>1950</td>
<td></td>
</tr>
<tr>
<td>Harwell Computer</td>
<td></td>
<td>Harwell</td>
<td>480</td>
<td>1951</td>
<td>Made with 480 relays, 828 Dekatron valves for math</td>
</tr>
<tr>
<td>Mark I</td>
<td></td>
<td>Electrotechnical Laboratory</td>
<td></td>
<td>1952</td>
<td></td>
</tr>
<tr>
<td>Z5</td>
<td>Konrad Zuse</td>
<td>Zuse KG</td>
<td>2,500</td>
<td>1953</td>
<td></td>
</tr>
<tr>
<td>FACOM 100</td>
<td></td>
<td>Fujitsu</td>
<td></td>
<td>1954</td>
<td></td>
</tr>
<tr>
<td>Z11</td>
<td>Konrad Zuse</td>
<td>Zuse KG</td>
<td>1,665</td>
<td>1955</td>
<td></td>
</tr>
<tr>
<td>Mark II</td>
<td></td>
<td>Electrotechnical Laboratory</td>
<td>22,253</td>
<td>1955</td>
<td></td>
</tr>
</tbody></table>

</details> 
<h3 id="什么是继电器"><a href="#什么是继电器" class="headerlink" title="什么是继电器"></a>什么是继电器</h3><p>真空管<br>晶体管</p>
]]></content>
      <categories>
        <category>ComputerScience</category>
        <category>TechHistory</category>
      </categories>
      <tags>
        <tag>ComputerHistory</tag>
      </tags>
  </entry>
  <entry>
    <title>WebComponents</title>
    <url>//WebComponents/</url>
    <content><![CDATA[<div class="note info"><p><a href="https://kinsta.com/blog/web-components/#what-are-web-components">理解WebComponents</a></p>
</div>
<p>Web Components 作为一组技术于 2012 年提出，旨在通过提供封装、模块化和可重用的组件来改善 Web 开发。在Web Components出现之前，没有自定义（或风格化）组件并且做到可复用的方法，只是提供像jQuery这样的JS库来简化DOM操作，这种方法是通过使用 JavaScript 函数和对象来创建可复用的代码。例如，可以创建构造函数，使用这些构造函数来生成带有特定功能或样式的 DOM 元素，但缺乏一种系统化的方式来创建可重用的组件或封装的功能。W3C和WAHTWG组织将这些需求正式标准化、制定规范后，浏览器厂商根据规范开发相应的接口（API）以供使用，这部分API就叫做Web Components API,Web Components 的核心特性包括custom element、shadow dom、template。</p>
<div class="tabs" id="webcomponent"><ul class="nav-tabs"><li class="tab active"><a href="#webcomponent-1">HTML DOM Tree</a></li><li class="tab"><a href="#webcomponent-2">custom elements</a></li><li class="tab"><a href="#webcomponent-3">shadowdom</a></li><li class="tab"><a href="#webcomponent-4">template</a></li><li class="tab"><a href="#webcomponent-5">example</a></li></ul><div class="tab-content"><div class="tab-pane active" id="webcomponent-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Node</span><br><span class="line">├── Document</span><br><span class="line">│   ├── DocumentFragment</span><br><span class="line">│   ├── DocumentType  (例如: &lt;!DOCTYPE html&gt;)</span><br><span class="line">│   └── ... (其他文档类型)</span><br><span class="line">├── Element</span><br><span class="line">│   ├── HTMLElement</span><br><span class="line">│   │   ├── HTMLAnchorElement           // <span class="language-xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLBodyElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLDivElement              // <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLHeadingElement           // <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span>, ..., <span class="language-xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLImageElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLInputElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLLabelElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLParagraphElement         // <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLSpanElement              // <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLTableElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLTableRowElement          // <span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLTableCellElement         // <span class="language-xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span>, <span class="language-xml"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLFormElement              // <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line">│   │   ├── HTMLSelectElement            // <span class="language-xml"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span></span><br><span class="line">│   │   └── ... (其他 HTML 元素)</span><br><span class="line">│   ├── SVGElement                       // SVG 元素的基础类</span><br><span class="line">│   │   ├── SVGCircleElement             // <span class="language-xml"><span class="tag">&lt;<span class="name">circle</span>&gt;</span></span></span><br><span class="line">│   │   ├── SVGRectElement               // <span class="language-xml"><span class="tag">&lt;<span class="name">rect</span>&gt;</span></span></span><br><span class="line">│   │   └── ... (其他 SVG 元素)</span><br><span class="line">│   ├── Text</span><br><span class="line">│   ├── Comment</span><br><span class="line">│   └── ... (其他节点类型，如 ProcessingInstruction)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="webcomponent-2"><p>通过继承 <code>HTMLElement</code> 类并实现其中的 API。具体包括：</p>
<ul>
<li><code>customElements.define(name, constructor, options)</code>：定义一个新的自定义元素。</li>
<li><code>customElements.get(name)</code>：获取指定名称的自定义元素构造函数。</li>
<li>生命周期回调方法：<ul>
<li><code>connectedCallback</code>：当自定义元素被添加到文档 DOM 中时调用。</li>
<li><code>disconnectedCallback</code>：当自定义元素从文档 DOM 中移除时调用。</li>
<li><code>adoptedCallback</code>：当自定义元素被移动到新的文档时调用。</li>
<li><code>attributeChangedCallback(name, oldValue, newValue)</code>：当自定义元素的属性被添加、移除或更改时调用。</li>
</ul>
</li>
</ul></div><div class="tab-pane" id="webcomponent-3"><p>通过 Shadow API 封装自定义元素的样式。具体包括：</p>
<ul>
<li><code>attachShadow(options)</code>：将 shadow DOM 树附加到元素上。</li>
<li><code>ShadowRoot</code>：shadow DOM 树的根节点，提供对 shadow DOM 的访问。</li>
<li><code>mode</code>：指定 shadow DOM 的模式，可以是 <code>&#39;open&#39;</code> 或 <code>&#39;closed&#39;</code>。<ul>
<li><code>&#39;open&#39;</code>：表示 shadow DOM 可以通过 JavaScript 访问。</li>
<li><code>&#39;closed&#39;</code>：表示 shadow DOM 不能通过 JavaScript 访问。</li>
</ul>
</li>
</ul>
<p>通过这种方式，可以确保自定义元素的样式不会受到外部文档的影响，同时外部代码也无法直接改变该元素的样式。</p></div><div class="tab-pane" id="webcomponent-4"><p>使用模板语法，便于直接编写 HTML 语法，否则需要使用 <code>innerHTML</code>、<code>content</code> 等语法硬编码。具体包括：</p>
<ul>
<li><code>&lt;template&gt;</code>：定义可重用的模板。</li>
<li><code>document.importNode(template.content, true)</code>：克隆模板内容。</li>
<li><code>template.content.cloneNode(true)</code>：克隆模板内容（现代浏览器中更推荐使用 <code>importNode</code>）。</li>
</ul>
<p>通过模板语法，可以更清晰地组织和重用 HTML 内容，避免硬编码 HTML 字符串。</p></div><div class="tab-pane" id="webcomponent-5"><p><a href="/assets/html/my-element.html">效果</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Components 示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web Components 示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-element</span>&gt;</span><span class="tag">&lt;/<span class="name">my-element</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;myTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个模板内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">MyElement</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myTemplate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> clone = <span class="variable language_">document</span>.<span class="title function_">importNode</span>(template.<span class="property">content</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">                shadow.<span class="title function_">appendChild</span>(clone);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-element&#x27;</span>, <span class="title class_">MyElement</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div>
<p>我们发现是不是和Vue SFC很像？其实是不一样的，Web Components方式是原生的JS，不依赖任何框架，Vue是通过VDOM方式实现的，现在似乎使用Web Components的越来越多了。<a href="https://juejin.cn/post/7135805641943154702">点这里查看他们的区别</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>OSHistory</title>
    <url>//OSHistory/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1>]]></content>
      <categories>
        <category>ComputerScience</category>
        <category>TechHistory</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>/404/index.html</url>
    <content><![CDATA[<script src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"
        charset="utf-8" homePageUrl="/" homePageName="Back to home">
</script>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>lahp</title>
    <url>/lahp/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>资源汇总</title>
    <url>/resource/ocean.html</url>
    <content><![CDATA[<p>持续更新…</p>
<h1 id="缺课missing-semester"><a href="#缺课missing-semester" class="headerlink" title="缺课missing-semester"></a>缺课missing-semester</h1><ol>
<li><a href="https://git-scm.com/book/zh/v2/%e8%b5%b7%e6%ad%a5-%e5%85%b3%e4%ba%8e%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">GitBook</a>详解Git<br><img src="/resource/ocean/tutorial/tutorials.png" alt="alt text"></li>
</ol>
<h1 id="教程tutorial"><a href="#教程tutorial" class="headerlink" title="教程tutorial"></a>教程tutorial</h1><ol>
<li><a href="https://zh.javascript.info/">JS现代教程</a><br><img src="/resource/ocean/tutorial/jsinfo.png" alt="alt text"></li>
</ol>
<h1 id="书籍book"><a href="#书籍book" class="headerlink" title="书籍book"></a>书籍book</h1><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><ol>
<li><a href="https://awesome-programming-books.github.io/computer-system/%E7%BC%96%E7%A0%81%EF%BC%9A%E9%9A%90%E5%8C%BF%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E8%83%8C%E5%90%8E%E7%9A%84%E8%AF%AD%E8%A8%80.pdf">编码：隐匿在计算机软硬件背后的语言</a><br><img src="/resource/ocean/book/book-code.png" alt="code"></li>
</ol>
<h1 id="网站site"><a href="#网站site" class="headerlink" title="网站site"></a>网站site</h1><ol>
<li><a href="https://awesome-programming-books.github.io/">技术书籍网站</a><br><img src="/resource/ocean/site/awesomebook.png" alt="book"></li>
<li><a href="https://ocw.mit.edu/">MIT OpenCourseWare</a><br><img src="/resource/ocean/site/mitocw.png" alt="alt text"></li>
</ol>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><h1 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/computer-science/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/science/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/assets/html/my-element.html</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Components 示例</title>
</head>

<body>
    <h1>Web Components 示例</h1>
    <my-element></my-element>

    <template id="myTemplate">
        <style>
            p {
                color: blue;
                font-size: 20px;
            }
        </style>
        <p>这是一个模板内容</p>
    </template>

    <script>
        class MyElement extends HTMLElement {
            constructor() {
                super();
                const shadow = this.attachShadow({ mode: 'open' });
                const template = document.getElementById('myTemplate');
                const clone = document.importNode(template.content, true);
                shadow.appendChild(clone);
            }
        }
        customElements.define('my-element', MyElement);
    </script>
</body>

</html>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/computer-science/programming-language/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/computer-science/missing-semester/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/computer-science/computer-network/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/computer-science/web/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>如何使用 Hexo 的 more 标签</title>
    <url>/lahp/art/index.html</url>
    <content><![CDATA[<p>这是文章的开篇部分。这里会显示在文章列表页面。</p>
<span id="more"></span>

<p>这是文章的详细内容，只有在访问文章的详情页时才会显示。<br>在这里您可以添加更多的信息、图片或者其他内容。</p>
<p>您可以在不同的部分讨论主题、分享经验或讲述故事。</p>
]]></content>
  </entry>
  <entry>
    <title>中国近代史</title>
    <url>/lahp/history/HistoryOfModernChina.html</url>
    <content><![CDATA[<div class="note warning"><p>本文基于<a href="https://cup.cuhk.edu.hk/index.php?route=product/product&product_id=493">《中国近代史（上册）》</a>，<a href="https://cup.cuhk.edu.hk/index.php?route=product/product&product_id=494">《中国近代史（下册）》</a></p>
</div>
<details class="note info"><summary><p>历代纪元表</p>
</summary>
<table>
    <tr>
        <td rowspan="10">清朝</td>
        <td>顺治</td>
        <td>公元1644~1661年</td>
    </tr>
    <tr>
        <td>康熙</td>
        <td>公元1661~1722年</td>
    </tr>
    <tr>
        <td>雍正</td>
        <td>公元1722~1735年</td>
    </tr>
    <tr>
        <td>乾隆</td>
        <td>公元1735~1796年</td>
    </tr>
    <tr>
        <td>嘉庆</td>
        <td>公元1796~1820年</td>
    </tr>
    <tr>
        <td>道光</td>
        <td>公元1820~1850年</td>
    </tr>
    <tr>
        <td>咸丰</td>
        <td>公元1850~1861年</td>
    </tr>
    <tr>
        <td>同治</td>
        <td>公元1861~1875年</td>
    </tr>
    <tr>
        <td>光绪</td>
        <td>公元1875~1908年</td>
    </tr>
    <tr>
        <td>宣统</td>
        <td>公元1908~1912年</td>
    </tr>
    <tr>
        <td colspan="2">中华民国</td>
        <td>公元1912年~1949年</td>
    </tr>
    <tr>
        <td colspan="2">中华人民共和国</td>
        <td>公元1949年~至今</td>
    </tr>
</table>
</details>


<h1 id="传统制度的延续-1600-1800年"><a href="#传统制度的延续-1600-1800年" class="headerlink" title="传统制度的延续 1600-1800年"></a>传统制度的延续 1600-1800年</h1><h2 id="清朝的建立"><a href="#清朝的建立" class="headerlink" title="清朝的建立"></a>清朝的建立</h2><p>满洲人为游牧民族女真族的一支，</p>
<h2 id="南明抗清"><a href="#南明抗清" class="headerlink" title="南明抗清"></a>南明抗清</h2><h2 id="王朝的巩固与辉煌"><a href="#王朝的巩固与辉煌" class="headerlink" title="王朝的巩固与辉煌"></a>王朝的巩固与辉煌</h2><h2 id="对外关系"><a href="#对外关系" class="headerlink" title="对外关系"></a>对外关系</h2><h2 id="国运逆转：由盛到衰"><a href="#国运逆转：由盛到衰" class="headerlink" title="国运逆转：由盛到衰"></a>国运逆转：由盛到衰</h2><h1 id="外患内乱-1800-1864年"><a href="#外患内乱-1800-1864年" class="headerlink" title="外患内乱 1800-1864年"></a>外患内乱 1800-1864年</h1><h1 id="帝国主义加剧时期的自强运动-1861-1895年"><a href="#帝国主义加剧时期的自强运动-1861-1895年" class="headerlink" title="帝国主义加剧时期的自强运动 1861-1895年"></a>帝国主义加剧时期的自强运动 1861-1895年</h1><h1 id="改革与革命-1898-1912年"><a href="#改革与革命-1898-1912年" class="headerlink" title="改革与革命 1898-1912年"></a>改革与革命 1898-1912年</h1><h1 id="主义与抗战-1917-1945年"><a href="#主义与抗战-1917-1945年" class="headerlink" title="主义与抗战 1917-1945年"></a>主义与抗战 1917-1945年</h1><h1 id="中华人民共和国的兴起-1945"><a href="#中华人民共和国的兴起-1945" class="headerlink" title="中华人民共和国的兴起 1945-"></a>中华人民共和国的兴起 1945-</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lahp/history/index.html</url>
    <content><![CDATA[<p>历史</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lahp/literature/index.html</url>
    <content><![CDATA[<p>文学</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lahp/philosophy/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/lahp/literature/pre-qin.html</url>
    <content><![CDATA[<p>先秦文学</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/science/tech-history/electric-communication.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>git底层原理</title>
    <url>/computer-science/missing-semester/git/git.html</url>
    <content><![CDATA[<h1 id="Git底层原理"><a href="#Git底层原理" class="headerlink" title="Git底层原理"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1">Git底层原理</a></h1><h2 id="git-日志"><a href="#git-日志" class="headerlink" title="git 日志"></a>git 日志</h2><h3 id="git-log-git-log-g-git-reflog-区别"><a href="#git-log-git-log-g-git-reflog-区别" class="headerlink" title="git log &#x2F;git log -g&#x2F;git reflog 区别"></a>git log &#x2F;git log -g&#x2F;git reflog 区别</h3><ol>
<li>理解区别<br><strong>Question</strong></li>
</ol>
<p>git reflog 和git log -g查看的是整个仓库的历史,git log 查看的是当亲分支的历史，这样理解对吗</p>
<p><strong>Answer</strong></p>
<p>您的理解是正确的。以下是对这几条命令的具体说明：</p>
<ul>
<li><p>**<code>git log</code>**：这个命令用于查看当前分支的提交历史。它只会显示您当前所处分支的提交记录，不会涉及其他分支的历史。</p>
</li>
<li><p>**<code>git reflog</code>**：这个命令用于查看本地仓库的引用日志，它会显示最近的操作记录，包括提交、暂存、切换分支等。<code>reflog</code> 记录了所有操作的引用，实际上可以帮助您找到丢失的提交或撤销某些操作。</p>
</li>
<li><p>**<code>git log -g</code>**：这个命令是 <code>git log</code> 的一种扩展，可以查看引用的提交记录，包含所有的 refs（如分支和标签的移动历史）。它展示的数据不仅限于当前分支，而是涵盖了关于引用的更多信息，类似于 <code>reflog</code> 的内容。</p>
</li>
</ul>
<p>总结来说：</p>
<ul>
<li><code>git log</code> 关注于当前分支的历史。</li>
<li><code>git reflog</code> 关注于本地操作的历史。</li>
<li><code>git log -g</code> 则提供了对引用变动历史的一个全面视图。</li>
</ul>
<p>希望这能帮助您更好地理解这几个命令的区别！<br>2. 具体例子</p>
<ul>
<li><p>读log</p>
<ul>
<li>括号中有head的即当前活动所在commit对象</li>
<li>括号中的分支即引用了这个commit的所有分支，当分支更新提交时就会随之变化，其实就是指明了对应的分支正在活动的commit对象处，切换分支时就是切换到这个commit</li>
<li>括号中红色为远程分支，绿色是本地分支、</li>
<li>HEAD@{number}是commit 的别名，可以使用reset head~number的形式回退</li>
<li>“:”后的内容说明了做了什么操作来到这个commit<br><img src="/git%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/readlog.png" alt="alt text"></li>
</ul>
</li>
<li><p>git log 查看当前分支日志<br><img src="/git%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/image.png" alt="alt text"></p>
</li>
<li><p>git reflog 查看<br><img src="/git%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/reflog.png" alt="alt text"></p>
</li>
<li><p>git log -g 查看包括reflog 的日志<br><img src="/computer-science/missing-semester/git/images/log-g.png" alt="alt text"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/science/tech-history/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hexo博客建站参考</title>
    <url>/computer-science/missing-semester/hexo/hexo.html</url>
    <content><![CDATA[<h1 id="主题-Theme"><a href="#主题-Theme" class="headerlink" title="主题(Theme)"></a>主题(Theme)</h1><div class="note warning"><p>本博客使用主题为<a href="https://theme-next.js.org/">NexT</a>，本节内容为NexT主题专属，其他主题请参考<a href="https://hexo.io/themes/">Hexo Theme</a></p>
</div>
<h2 id="菜单配置-Menu"><a href="#菜单配置-Menu" class="headerlink" title="菜单配置(Menu)"></a>菜单配置(Menu)</h2><div class="note info"><p><a href="https://theme-next.js.org/docs/theme-settings/index.html?highlight=menu#Configuring-Menu-Items">NexT菜单配置</a></p>
</div>
<p>NexT菜单配置</p>
<details class="note default no-icon"><summary><p>菜单配置</p>
</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Home: / || fa fa-home</span><br><span class="line">  ComputerScience: </span><br><span class="line">    default: /computer-science/ || fas fa-laptop-code</span><br><span class="line">    Web: </span><br><span class="line">      default: /web/ || fa-brands fa-node-js&quot;</span><br><span class="line">    ComputerNetwork: </span><br><span class="line">      default: /computer-network/ || fa-solid fa-globe</span><br><span class="line">    ProgrammingLanguage:  </span><br><span class="line">      default: /programming-language/ || fa-regular fa-file-code</span><br><span class="line">    MissingSemester: </span><br><span class="line">      default: /missing-semester/ || fa-solid fa-terminal</span><br><span class="line">      Hexo: /hexo/hexo.html</span><br><span class="line">      Git: /git/git.html </span><br><span class="line">  Science: </span><br><span class="line">    default: /science/ || fa-solid fa-atom</span><br><span class="line">    TechHistory: </span><br><span class="line">      default: /tech-history/ || fa-solid fa-timeline</span><br><span class="line">  LAHP: </span><br><span class="line">    default: /lahp/ || fa fa-book</span><br><span class="line">    Literature: </span><br><span class="line">      default: /literature/ || fa-solid fa-book-open</span><br><span class="line">    Art: </span><br><span class="line">      default: /art/ || fa-solid fa-clapperboard</span><br><span class="line">    History: </span><br><span class="line">      default: /history/ || fa-solid fa-timeline</span><br><span class="line">      Qing Dynasty: /qing.html || fa fa-book</span><br><span class="line">    Philosophy: </span><br><span class="line">      default: /philosophy/ || fa-solid fa-graduation-cap</span><br><span class="line">  Resource: /resource/ocean.html || fa-solid fa-database</span><br></pre></td></tr></table></figure>
</details>

<h2 id="图标（Icon）"><a href="#图标（Icon）" class="headerlink" title="图标（Icon）"></a>图标（Icon）</h2><div class="note warning"></div>
<h2 id="标签（Tag）"><a href="#标签（Tag）" class="headerlink" title="标签（Tag）"></a>标签（Tag）</h2><h2 id="插件-Plugin"><a href="#插件-Plugin" class="headerlink" title="插件(Plugin)"></a>插件(Plugin)</h2><h3 id="博客搜索引擎-Search-Engine"><a href="#博客搜索引擎-Search-Engine" class="headerlink" title="博客搜索引擎(Search Engine)"></a>博客搜索引擎(Search Engine)</h3><div class="note warning"><p>本插件为<a href="https://theme-next.js.org/">Next主题</a>所提供的插件<a href="https://github.com/next-theme/hexo-generator-searchdb">searchdb</a><br>当前使用为<a href="https://theme-next.js.org/docs/third-party-services/search-services.html?highlight=search#Local-Search">Local-Search</a></p>
</div>
<h1 id="图片-Image"><a href="#图片-Image" class="headerlink" title="图片(Image)"></a>图片(Image)</h1><h1 id="报错案例"><a href="#报错案例" class="headerlink" title="报错案例"></a>报错案例</h1><h2 id="使用NexT-note语法报错"><a href="#使用NexT-note语法报错" class="headerlink" title="使用NexT note语法报错"></a>使用NexT note语法报错</h2><p>使用note语法出现语法错误时候可能会产生下面这个报错，修正语法可解决<br>如</p>
<div class="tabs" id="note-error"><ul class="nav-tabs"><li class="tab active"><a href="#note-error-1">报错信息</a></li><li class="tab"><a href="#note-error-2">错误用法</a></li><li class="tab"><a href="#note-error-3">正确用法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="note-error-1"><details class="note danger no-icon"><summary><p>报错信息</p>
</summary>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path)</span><br><span class="line">  unexpected end of file</span><br><span class="line">    at Object._prettifyError (E:\CS\study\blog\node_modules\nunjucks\src\lib.js:32:11)</span><br><span class="line">    at Template.render (E:\CS\study\blog\node_modules\nunjucks\src\environment.js:442:21)</span><br><span class="line">    at Environment.renderString (E:\CS\study\blog\node_modules\nunjucks\src\environment.js:313:17)</span><br><span class="line">    at E:\CS\study\blog\node_modules\hexo\dist\extend\tag.js:206:22</span><br><span class="line">    at tryCatcher (E:\CS\study\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise.fromNode.Promise.fromCallback (E:\CS\study\blog\node_modules\bluebird\js\release\promise.js:209:30)</span><br><span class="line">    at Tag.render (E:\CS\study\blog\node_modules\hexo\dist\extend\tag.js:205:35)</span><br><span class="line">    at Object.onRenderEnd (E:\CS\study\blog\node_modules\hexo\dist\hexo\post.js:399:32)</span><br><span class="line">    at E:\CS\study\blog\node_modules\hexo\dist\hexo\render.js:77:29</span><br><span class="line">    at tryCatcher (E:\CS\study\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\CS\study\blog\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (E:\CS\study\blog\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\CS\study\blog\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (E:\CS\study\blog\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at _drainQueueStep (E:\CS\study\blog\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">    at _drainQueue (E:\CS\study\blog\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">    at Async._drainQueues (E:\CS\study\blog\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Async.drainQueues (E:\CS\study\blog\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at process.processImmediate (node:internal/timers:483:21)</span><br></pre></td></tr></table></figure>
</details></div><div class="tab-pane" id="note-error-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//少结尾%</span><br><span class="line">&#123;% note info &#125; </span><br><span class="line">&#123;% endnote&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="note-error-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125; </span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div></div></div>






]]></content>
  </entry>
  <entry>
    <title>html</title>
    <url>/computer-science/web/html/html.html</url>
    <content><![CDATA[<h1 id="HTMLDOM"><a href="#HTMLDOM" class="headerlink" title="HTMLDOM"></a>HTMLDOM</h1><h2 id="DOM-Interface-Inherit-Tree"><a href="#DOM-Interface-Inherit-Tree" class="headerlink" title="DOM Interface Inherit Tree"></a>DOM Interface Inherit Tree</h2><h2 id="Event-接口"><a href="#Event-接口" class="headerlink" title="Event 接口"></a>Event 接口</h2><div class="note info"><p><a href="https://dom.spec.whatwg.org/#interface-event">接口标准</a></p>
</div>
<p><code>event = new Event(type [, eventInitDict])</code></p>
<div class="tabs" id="eventinitdict-"><ul class="nav-tabs"><li class="tab active"><a href="#eventinitdict--1">bubbles</a></li><li class="tab"><a href="#eventinitdict--2">cancelable</a></li><li class="tab"><a href="#eventinitdict--3">composed</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eventinitdict--1"><p>js事件触发机制:捕获阶段&#x3D;&gt;目标事件阶段&#x3D;&gt;冒泡阶段<br>捕获阶段:事件触发顺序从最外层元素documen到目标事件元素<br>目标事件阶段:目标事件触发<br>冒泡阶段:事件触发顺序从目标事件元素到最外层元素document</p></div><div class="tab-pane" id="eventinitdict--2"><p>默认行为是否可取消,即event.preventDefault()是否可执行;另外当EventTarget的passive&#x3D;true时候即认为语句event.preventDefault()将不会执行,即默认行为会执行.即伪代码:<code>event.preventDefault() = cancelable &amp;&amp; !passive</code></p></div><div class="tab-pane" id="eventinitdict--3"></div></div></div>

<h2 id="EventTarget-接口"><a href="#EventTarget-接口" class="headerlink" title="EventTarget 接口"></a>EventTarget 接口</h2><div class="note info"><p><a href="https://dom.spec.whatwg.org/#eventtarget">接口标准</a></p>
</div>
<p><code>target . addEventListener(type, callback [, options])</code><br>  <div class="tabs" id="options"><ul class="nav-tabs"><li class="tab active"><a href="#options-1">caputer</a></li><li class="tab"><a href="#options-2">passive</a></li><li class="tab"><a href="#options-3">once</a></li></ul><div class="tab-content"><div class="tab-pane active" id="options-1"><p>capture控制事件是否在捕获阶段执行</p></div><div class="tab-pane" id="options-2"><p>passive控制event.preventDefault()是否可以执行</p></div><div class="tab-pane" id="options-3"><p>控制事件是否执行一次,once&#x3D;true,则执行一次后销毁该事件</p></div></div></div></p>
]]></content>
  </entry>
</search>
